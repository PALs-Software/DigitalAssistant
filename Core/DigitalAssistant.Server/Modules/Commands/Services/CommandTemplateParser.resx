<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BooleanRegexTemplate" xml:space="preserve">
    <value>0|false|off|down|switch off|turn off|1|true|on|up|switch on|turn on</value>
  </data>
  <data name="ColorRegexTemplate" xml:space="preserve">
    <value>Transparent|Alice Blue|Antique White|Aqua|Aquamarine|Azure|Beige|Bisque|Black|Blanched Almond|Blue|Blue Violet|Brown|Burly Wood|Cadet Blue|Chartreuse|Chocolate|Coral|Cornflower Blue|Cornsilk|Crimson|Cyan|Dark Blue|Dark Cyan|Dark Goldenrod|Dark Gray|Dark Green|Dark Khaki|Dark Magenta|Dark Olive Green|Dark Orange|Dark Orchid|Dark Red|Dark Salmon|Dark Sea Green|Dark Slate Blue|Dark Slate Gray|Dark Turquoise|Dark Violet|Deep Pink|Deep Sky Blue|Dim Gray|Dodger Blue|Firebrick|Floral White|Forest Green|Fuchsia|Gainsboro|Ghost White|Gold|Goldenrod|Gray|Green|Green Yellow|Honeydew|Hot Pink|Indian Red|Indigo|Ivory|Khaki|Lavender|Lavender Blush|Lawn Green|Lemon Chiffon|Light Blue|Light Coral|Light Cyan|Light Goldenrod Yellow|Light Gray|Light Green|Light Pink|Light Salmon|Light Sea Green|Light Sky Blue|Light Slate Gray|Light Steel Blue|Light Yellow|Lime|Lime Green|Linen|Magenta|Maroon|Medium Aquamarine|Medium Blue|Medium Orchid|Medium Purple|Medium Sea Green|Medium Slate Blue|Medium Spring Green|Medium Turquoise|Medium Violet Red|Midnight Blue|Mint Cream|Misty Rose|Moccasin|Navajo White|Navy|Old Lace|Olive|Olive Drab|Orange|Orange Red|Orchid|Pale Goldenrod|Pale Green|Pale Turquoise|Pale Violet Red|Papaya Whip|Peach Puff|Peru|Pink|Plum|Powder Blue|Purple|Red|Rosy Brown|Royal Blue|Saddle Brown|Salmon|Sandy Brown|Sea Green|Sea Shell|Sienna|Silver|Sky Blue|Slate Blue|Slate Gray|Snow|Spring Green|Steel Blue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|White Smoke|Yellow|Yellow Green|Rebecca Purple</value>
  </data>
  <data name="ColorTemperatureRegexTemplate" xml:space="preserve">
    <value>Warm White|Neutral White|Cold White</value>
  </data>
  <data name="DateRegexTemplate" xml:space="preserve">
    <value>(?:(?:1[0,1,2]|0*[1-9])(?:\/|-)(?:3[01]|[12][0-9]|0*[1-9])(?:\/|-)(?:\d{4}|\d{2})|(?:1[0,1,2]|0*[1-9])(?:\/|-)(?:3[01]|[12][0-9]|0*[1-9]))</value>
  </data>
  <data name="TimeRegexTemplate" xml:space="preserve">
    <value>[0-9]+(?:\:|\.)[0-9]+(?: pm| am)</value>
  </data>
</root>
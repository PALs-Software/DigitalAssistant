using BlazorBase.CRUD;
using DigitalAssistant.Server.Data;
using DigitalAssistant.Server.Modules.Commands.Parser;
using DigitalAssistant.Server.Modules.Localization;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System.Diagnostics;
using System.Globalization;
using System.Threading;

namespace DigitalAssistant.Server.Tests;

/// <summary>
/// Test context wrapper for bUnit.
/// Read more about using <see cref="DigitalAssistantTestContext"/> <seealso href="https://bunit.dev/docs/getting-started/writing-tests.html#remove-boilerplate-code-from-tests">here</seealso>.
/// </summary>
public abstract class DigitalAssistantTestContext : TestContextWrapper
{
    public virtual void Setup()
    {
        Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en");
        Thread.CurrentThread.CurrentUICulture = Thread.CurrentThread.CurrentCulture;

        TestContext = new Bunit.TestContext();
        TestContext.Services.AddDbContext<SQLiteDbContext>(options =>
        {
            // Can not use in memory db, because it does not support all linq queries types used in the project like an ToLower in an any expression from an autogenerated List<String> column (AlternativeNames Property of Device Class)
            // So SQLite is used instead and an explicit database per test will be created and after that deleted
            options.UseSqlite($"Data Source=Testdb.db");
            options.LogTo((input) => Debug.WriteLine(input), LogLevel.Information);
            options.EnableSensitiveDataLogging();
            options.EnableDetailedErrors();
        }, contextLifetime: ServiceLifetime.Transient, optionsLifetime: ServiceLifetime.Transient);

        TestContext.Services.AddBlazorBaseCRUD<SQLiteDbContext>(options =>
        {
            options.UseAsyncDbContextMethodsPerDefaultInBaseDbContext = false;
        });

        TestContext.Services
            .AddLocalization()
            .AddSingleton<CommandTemplateParser>()
            .AddSingleton<CommandParameterParser>()

            .AddTransient(typeof(JsonStringLocalizer<>))
        ;

        using var scope = TestContext.Services.GetRequiredService<IServiceScopeFactory>().CreateScope();
        scope.ServiceProvider.GetRequiredService<SQLiteDbContext>().Database.Migrate();
    }

    [TestCleanup]
    public void TearDown()
    {
        Services.GetRequiredService<SQLiteDbContext>().Database.EnsureDeleted();
        TestContext?.Dispose();
    }

    protected void SwitchToLanguage(string langugae)
    {
        Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo(langugae);
        Thread.CurrentThread.CurrentUICulture = Thread.CurrentThread.CurrentCulture;
    }
}
